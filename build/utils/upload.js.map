{"version":3,"sources":["../../src/utils/upload.js"],"names":["dotenv","config","awsAccessKey","process","env","AWS_KEY","awsSecret","AWS_SECRET","bucketName","BUCKET_NAME","s3","aws","S3","accessKeyId","secretAccessKey","region","fileFilter","req","file","cb","console","log","mimetype","Error","upload","storage","bucket","acl","metadata","fieldName","fieldname","key","Date","now","toString","path","extname","originalname","limits","fileSize","module","exports"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAGAA,iBAAOC,MAAP;;AAEA,IAAMC,eAAeC,QAAQC,GAAR,CAAYC,OAAjC;AACA,IAAMC,YAAYH,QAAQC,GAAR,CAAYG,UAA9B;AACA,IAAMC,aAAaL,QAAQC,GAAR,CAAYK,WAA/B;;AAEA;AACA,IAAMC,KAAK,IAAIC,iBAAIC,EAAR,CAAW;AAClBC,iBAAaX,YADK;AAElBY,qBAAiBR,SAFC;AAGlBS,YAAQ;AAHU,CAAX,CAAX;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAMC,aAAa,SAAbA,UAAa,CAACC,GAAD,EAAMC,IAAN,EAAYC,EAAZ,EAAmB;AAClCC,YAAQC,GAAR,CAAYH,IAAZ;AACA;AACA,QAAIA,KAAKI,QAAL,IAAiB,WAAjB,IAAgCJ,KAAKI,QAAL,IAAiB,WAAjD,IAAgEJ,KAAKI,QAAL,IAAiB,YAAjF,IAAiGJ,KAAKI,QAAL,IAAiB,WAAtH,EAAmI;AAC/HH,WAAG,IAAH,EAAS,IAAT;AACH,KAFD,MAEO;AACHA,WAAG,IAAH,EAAS,KAAT;AACA,eAAOA,GAAG,IAAII,KAAJ,CAAU,yCAAV,CAAH,CAAP;AACH;AACJ,CATD;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIA;AACA,IAAMC,SAAS,sBAAO;AAClB;AACAC,aAAS,uBAAS;AACdf,YAAIA,EADU;AAEdgB,gBAAQlB,UAFM;AAGdmB,aAAK,aAHS;AAIdC,kBAAU,kBAACX,GAAD,EAAMC,IAAN,EAAYC,EAAZ,EAAmB;AACzBA,eAAG,IAAH,EAAS,EAAEU,WAAWX,KAAKY,SAAlB,EAAT;AACH,SANa;AAOdC,aAAK,aAAUd,GAAV,EAAeC,IAAf,EAAqBC,EAArB,EAAyB;AAC1B;AACA;AACAA,eAAG,IAAH,EAASa,KAAKC,GAAL,GAAWC,QAAX,KAAwB,GAAxB,GAA8BC,eAAKC,OAAL,CAAalB,KAAKmB,YAAlB,CAAvC;AACH;AAXa,KAAT,CAFS;AAelBC,YAAQ,EAAEC,UAAU,OAAZ,EAfU,EAea;AAC/BvB,gBAAYA;;AAhBM,CAAP,CAAf;;AAoBAwB,OAAOC,OAAP,GAAiBjB,MAAjB","file":"upload.js","sourcesContent":["import multer from 'multer'\nimport multerS3 from 'multer-s3'\nimport aws from 'aws-sdk'\nimport path from 'path'\nimport dotenv from 'dotenv';\n\n\ndotenv.config();\n\nconst awsAccessKey = process.env.AWS_KEY\nconst awsSecret = process.env.AWS_SECRET\nconst bucketName = process.env.BUCKET_NAME\n\n//Configure storage on S3\nconst s3 = new aws.S3({\n    accessKeyId: awsAccessKey,\n    secretAccessKey: awsSecret,\n    region: 'ap-southeast-2',\n})\n\n//set destination and filename\n// const storage = multer.diskStorage({\n//     destination: function (req, file, cb) {\n//         cb(null, \"./uploads\");\n//     },\n//     filename: function (req, file, cb) {\n//         cb(null, new Date().toISOString() + file.originalname);\n//     }\n// })\n\n// Check File Type\n//define filter for multer uploads\nconst fileFilter = (req, file, cb) => {\n    console.log(file)\n    //reject file if not jpeg or png or jpg or gif\n    if (file.mimetype == \"image/png\" || file.mimetype == \"image/jpg\" || file.mimetype == \"image/jpeg\" || file.mimetype == \"image/gif\") {\n        cb(null, true);\n    } else {\n        cb(null, false);\n        return cb(new Error('Allowed only .png, .jpg, .jpeg and .gif'));\n    }\n}\n\n// const imageFilter = (req, file, cb) => {\n//     // accept image only\n//     if (!file.originalname.match(/\\.(jpg|jpeg|png|gif)$/)) {\n//         return cb(new Error('Only image files are allowed!'), false);\n//     }\n//     cb(null, true);\n// };\n\n\n\n//configure multer for uploading multiple files (max 4)\nconst upload = multer({\n    //storage: storage,\n    storage: multerS3({\n        s3: s3,\n        bucket: bucketName,\n        acl: \"public-read\",\n        metadata: (req, file, cb) => {\n            cb(null, { fieldName: file.fieldname })\n        },\n        key: function (req, file, cb) {\n            // console.log(\"file\", file)\n            //cb(null, Date.now().toString() + '-' + file.originalname)\n            cb(null, Date.now().toString() + '-' + path.extname(file.originalname));\n        }\n    }),\n    limits: { fileSize: 2000000 }, // In bytes: 2000000 bytes = 5 MB\n    fileFilter: fileFilter\n\n})\n\nmodule.exports = upload"]}