{"version":3,"sources":["../../src/controllers/userController.js"],"names":["dotenv","config","secret","process","env","SECRET","userRegister","req","res","body","firstName","lastName","email","password","User","findOne","user","status","send","msg","bcrypt","genSalt","salt","hash","save","payload","id","jwt","sign","expiresIn","err","token","json","console","log","message","userUpdate","profileImage","file","location","userInput","findById","params","select","_id","toString","findByIdAndUpdate","$set","new","validationRules","method","not","isEmpty","isEmail","isLength","min"],"mappings":"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","file":"userController.js","sourcesContent":["import User from '../models/userModel';\nimport dotenv from 'dotenv';\nimport jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\nimport { body, check } from 'express-validator';\nimport { seedCategories } from '../models/categoriesData'\n\n\ndotenv.config();\nconst secret = process.env.SECRET;\n\nexport const userRegister = async (req, res) => {\n  try {\n    const { firstName, lastName, email, password } = req.body;\n\n    //check if email exists\n    let user = await User.findOne({ email });\n\n    //if user email exist, send a message\n    if (user) {\n      return res.status(400).send({ msg: 'Email already exists.' });\n    }\n    // or if email not exist, create a new user\n    user = new User({\n      firstName,\n      lastName,\n      email,\n      password,\n    })\n\n    //seed user model with categories data\n    await seedCategories(user)\n\n    //geneate salt of length 10 and save to salt\n    const salt = await bcrypt.genSalt(10);\n\n    //hash password with salt\n    user.password = await bcrypt.hash(password, salt);\n\n    await user.save();\n\n    //create payload with user id\n    const payload = {\n      user: {\n        id: user.id,\n      },\n    };\n\n    //create jwt with payload\n    jwt.sign(\n      payload,\n      secret,\n      {\n        expiresIn: '10h',\n      },\n      (err, token) => {\n        if (err) throw err;\n        res.json({ token });\n      }\n    );\n  } catch (error) {\n    console.log(error.message);\n    res.status(500).send({ msg: 'Internal server error' });\n  }\n};\n\n\nexport const userUpdate = async (req, res) => {\n\n  try {\n   \n    let profileImage;\n    if (req.file) {\n      profileImage = req.file.location\n    }\n\n    const { firstName, lastName, email } = req.body\n\n    const userInput = {}\n    if (firstName) userInput.firstName = firstName\n    if (lastName) userInput.lastName = lastName\n    if (email) userInput.email = email\n    if (profileImage) userInput.profileImage = profileImage\n\n    let user = await User.findById(req.params.id).select('-password')\n    // console.log(\"nopass\", user)\n\n    if (!user) return res.status(404).json({ msg: 'User not found' })\n\n    if (user._id.toString() !== req.user.id) {\n      return res.status(401).json({ msg: \"Not authorized\" })\n    }\n\n    user = await User.findByIdAndUpdate(\n      req.params.id,\n      { $set: userInput },\n      { new: true })\n    //   await user.set({firstName, lastName, email});\n   //console.log(\"user2\", user)\n    return res.status(200).json(user);\n\n  } catch (error) {\n    console.log(error.message);\n    res.status(500).send({ msg: 'Internal server error' });\n  }\n}\n\nexport const validationRules = (method) => {\n  switch (method) {\n    case 'userSignUp': {\n      return [\n        // firstname required\n        body('firstName', 'First name is required').not().isEmpty(),\n\n        //last name required\n        body('lastName', 'Last name is required').not().isEmpty(),\n\n        //email required\n        body('email', 'Please include a valid email.').isEmail(),\n\n        // password must be at least 6 chars long\n        body('password').isLength({ min: 6 }),\n      ];\n    }\n    case 'userUpdate': {\n      return [\n        // firstname required\n        body('firstName', 'First name is required').not().isEmpty(),\n\n        //last name required\n        body('lastName', 'Last name is required').not().isEmpty(),\n\n        //email required\n        body('email', 'Please include a valid email.').isEmail(),\n      ]\n    }\n  }\n};\n\n"]}