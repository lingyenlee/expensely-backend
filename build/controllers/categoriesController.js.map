{"version":3,"sources":["../../src/controllers/categoriesController.js"],"names":["createCategory","req","res","body","name","color","transactionType","User","findById","user","id","categories","find","category","toLowerCase","status","json","msg","newCategory","push","save","length","console","log","send","getCategories","getCategory","params","categoryId","updateCategory","set","deleteCategory","remove","validationRules","method","exists","not","isEmpty","optional","isRgbColor","isIn"],"mappings":"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","file":"categoriesController.js","sourcesContent":["import User from '../models/userModel';\nimport { body, validationResult, param } from 'express-validator';\n\nexport const createCategory = async (req, res) => {\n  // console.log(\"req body\", req.body)\n  try {\n    const { name, color, transactionType } = req.body;\n\n    const user = await User.findById(req.user.id);\n\n    if (\n      user.categories.find(\n        (category) => category.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      return res.status(409).json({ msg: 'Category already exists' });\n    }\n\n    const newCategory = {\n      name,\n      color,\n      transactionType,\n    };\n\n    await user.categories.push(newCategory);\n    await user.save();\n    // console.log(\"saved\", user)\n    return res.status(201).json(user.categories[user.categories.length - 1]);\n  } catch (error) {\n    console.log(error);\n    res.status(500).send({ msg: 'Internal server error' });\n  }\n};\n\nexport const getCategories = async (req, res) => {\n  try {\n    const user = await User.findById(req.user.id);\n    return res.status(200).json(user.categories);\n  } catch (error) {\n    console.log(error);\n    res.status(500).send({ msg: 'Internal server error' });\n  }\n};\n\nexport const getCategory = async (req, res) => {\n  try {\n    const user = await User.findById(req.user.id);\n    const category = user.categories.id(req.params.categoryId);\n\n    if (!category) return res.status(404).json({ msg: 'category not found' });\n\n    return res.status(200).json(user.categories.id(req.params.categoryId));\n  } catch (error) {\n    console.log(error);\n    res.status(500).send({ msg: 'Internal server error' });\n  }\n};\n\nexport const updateCategory = async (req, res) => {\n  try {\n\n    const user = await User.findById(req.user.id);\n    const category = user.categories.id(req.params.categoryId);\n\n    if (!category) {\n      return res.status(404).json({ msg: 'Category not found' });\n    }\n\n    await category.set(req.body);\n    await user.save();\n    return res.status(200).json(category);\n  } catch (error) {\n    console.log(error);\n    res.status(500).send({ msg: 'Internal server error' });\n  }\n};\n\nexport const deleteCategory = async (req, res) => {\n  try {\n    const user = await User.findById(req.user.id);\n    const category = user.categories.id(req.params.categoryId);\n\n    if (!category) {\n      return res.status(404).json({ msg: 'Category not found' });\n    }\n\n    await category.remove();\n    await user.save();\n    return res.status(200).json(category);\n  } catch (error) {\n    console.log(error);\n    res.status(500).send({ msg: 'Internal server error' });\n  }\n};\n\nexport const validationRules = (method) => {\n  switch (method) {\n    case 'createCategory':\n      return [\n        body('name').exists().not().isEmpty(),\n        body('color').optional().isRgbColor(),\n        body('transactionType').not().isEmpty().isIn(['income', 'expense']),\n      ];\n    case 'updateCategory':\n      return [\n        param('categoryId').exists(),\n        body('transactionType').optional().isIn(['income', 'expense']),\n      ];\n    case 'deleteCategory':\n      return [param('categoryId').exists()];\n  }\n};\n"]}