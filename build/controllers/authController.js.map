{"version":3,"sources":["../../src/controllers/authController.js"],"names":["dotenv","config","secret","process","env","SECRET","getLoginUser","req","res","User","findById","user","id","select","status","json","console","error","message","send","msg","loginUser","body","email","password","findOne","bcrypt","compare","isMatch","payload","jwt","sign","expiresIn","err","token","log","validationRules","method","isEmail","isLength","min"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEAA,iBAAOC,MAAP;AACA,IAAMC,SAASC,QAAQC,GAAR,CAAYC,MAA3B;;AAEO,IAAMC;AAAA,qEAAe,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAELC,oBAAKC,QAAL,CAAcH,IAAII,IAAJ,CAASC,EAAvB,EAA2BC,MAA3B,CAAkC,WAAlC,CAFK;;AAAA;AAElBF,gBAFkB;;AAGxBH,gBAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBJ,IAArB;AAHwB;AAAA;;AAAA;AAAA;AAAA;;AAKxBK,oBAAQC,KAAR,CAAc,YAAMC,OAApB;AACAV,gBAAIM,MAAJ,CAAW,GAAX,EAAgBK,IAAhB,CAAqB,EAAEC,KAAK,uBAAP,EAArB;;AANwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAUA,IAAMC;AAAA,sEAAY,kBAAOd,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAEOD,IAAIe,IAFX,EAEbC,KAFa,aAEbA,KAFa,EAENC,QAFM,aAENA,QAFM;;AAIrB;;AAJqB;AAAA,mBAKJf,oBAAKgB,OAAL,CAAa,EAAEF,YAAF,EAAb,CALI;;AAAA;AAKjBZ,gBALiB;;AAAA,gBAQhBA,IARgB;AAAA;AAAA;AAAA;;AAAA,8CASZH,IAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEK,KAAK,gBAAP,EAArB,CATY;;AAAA;AAAA;AAAA,mBAaCM,mBAAOC,OAAP,CAAeH,QAAf,EAAyBb,KAAKa,QAA9B,CAbD;;AAAA;AAafI,mBAbe;;;AAerB,gBAAI,CAACA,OAAL,EAAc;AACZpB,kBAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEK,KAAK,qBAAP,EAArB;AACD;;AAED;AACMS,mBApBe,GAoBL;AACdlB,oBAAM;AACJC,oBAAID,KAAKC;AADL;AADQ,aApBK;;AA0BrB;;AACAkB,mCAAIC,IAAJ,CACEF,OADF,EAEE3B,MAFF,EAGE;AACE8B,yBAAW;AADb,aAHF,EAME,UAACC,GAAD,EAAMC,KAAN,EAAgB;AACd,kBAAID,GAAJ,EAAS,MAAMA,GAAN;AACTzB,kBAAIO,IAAJ,CAAS,EAAEmB,YAAF,EAAT;AACD,aATH;AA3BqB;AAAA;;AAAA;AAAA;AAAA;;AAuCrBlB,oBAAQmB,GAAR,CAAY,aAAMjB,OAAlB;AACAV,gBAAIM,MAAJ,CAAW,GAAX,EAAgBK,IAAhB,CAAqB,EAAEC,KAAK,uBAAP,EAArB;;AAxCqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAZ;;AAAA;AAAA;AAAA;AAAA,GAAN;;AA4CA,IAAMgB,4CAAkB,SAAlBA,eAAkB,CAACC,MAAD,EAAY;AACzC,UAAQA,MAAR;AACE,SAAK,WAAL;AAAkB;AAChB,eAAO;AACL;AACA,oCAAK,OAAL,EAAc,+BAAd,EAA+CC,OAA/C,EAFK;;AAIL;AACA,oCAAK,UAAL,EAAiBC,QAAjB,CAA0B,EAAEC,KAAK,CAAP,EAA1B,CALK,CAAP;AAOD;AATH;AAWD,CAZM","file":"authController.js","sourcesContent":["import User from '../models/userModel';\nimport dotenv from 'dotenv';\nimport jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\nimport { body } from 'express-validator';\n\ndotenv.config();\nconst secret = process.env.SECRET;\n\nexport const getLoginUser = async (req, res) => {\n  try {\n    const user = await User.findById(req.user.id).select('-password');\n    res.status(200).json(user);\n  } catch (error) {\n    console.error(error.message);\n    res.status(500).send({ msg: 'Internal server error' });\n  }\n};\n\nexport const loginUser = async (req, res) => {\n  try {\n    const { email, password } = req.body;\n\n    //check if email exists\n    let user = await User.findOne({ email });\n\n    //if no email, send error message\n    if (!user) {\n      return res.status(400).json({ msg: 'No such emails' });\n    }\n\n    //if email, match password\n    const isMatch = await bcrypt.compare(password, user.password);\n\n    if (!isMatch) {\n      res.status(400).json({ msg: 'invalid credentials' });\n    }\n\n    //create payload with user id\n    const payload = {\n      user: {\n        id: user.id,\n      },\n    };\n\n    //create jwt with payload\n    jwt.sign(\n      payload,\n      secret,\n      {\n        expiresIn: '10h',\n      },\n      (err, token) => {\n        if (err) throw err;\n        res.json({ token });\n      }\n    );\n  } catch (error) {\n    console.log(error.message);\n    res.status(500).send({ msg: 'Internal server error' });\n  }\n};\n\nexport const validationRules = (method) => {\n  switch (method) {\n    case 'userLogin': {\n      return [\n        //email required\n        body('email', 'Please include a valid email.').isEmail(),\n\n        // password must be at least 6 chars long\n        body('password').isLength({ min: 6 }),\n      ];\n    }\n  }\n};\n"]}