{"version":3,"sources":["../../src/controllers/transactionsController.js"],"names":["addTransaction","req","res","User","findById","user","id","newTransaction","body","transactions","push","save","status","json","length","console","log","msg","editTransaction","params","transactionId","transaction","send","error","set","deleteTransaction","remove","getTransaction","getTransactions","validationRules","method","exists","not","isEmpty","isIn","optional"],"mappings":"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","file":"transactionsController.js","sourcesContent":["import User from '../models/userModel';\nimport { body, validationResult, param } from 'express-validator';\n\nexport const addTransaction = async (req, res) => {\n\n  try {\n    const user = await User.findById(req.user.id);\n\n    const newTransaction = { ...req.body };\n\n    await user.transactions.push(newTransaction);\n    await user.save();\n\n    return res\n      .status(201)\n      .json(user.transactions[user.transactions.length - 1]);\n  } catch (error) {\n    console.log(error);\n    return res.status(400).json({ msg: 'Error creating new Transaction' });\n  }\n};\n\nexport const editTransaction = async (req, res) => {\n  try {\n    const user = await User.findById(req.user.id);\n\n    const transaction = await user.transactions.id(req.params.transactionId);\n\n    if (!transaction) {\n      return res.status(404).send({ error: 'Transaction not found!' });\n    }\n\n    await transaction.set(req.body);\n    await user.save();\n\n    return res.status(200).json(transaction);\n  } catch (error) {\n    console.log(error);\n    return res.status(500).send({ msg: 'Internal Server Error' });\n  }\n};\n\nexport const deleteTransaction = async (req, res) => {\n  try {\n    const user = await User.findById(req.user.id);\n\n    const transaction = user.transactions.id(req.params.transactionId);\n\n    if (!transaction) {\n      return res.status(404).send({ error: 'Transaction not found!' });\n    }\n\n    await transaction.remove();\n    await user.save();\n\n    return res.status(200).json(transaction);\n  } catch (error) {\n    console.log(error);\n    return res.status(500).send({ msg: 'Internal Server Error' });\n  }\n};\n\nexport const getTransaction = async (req, res) => {\n  try {\n    const user = await User.findById(req.user.id);\n\n    const transaction = await user.transactions.id(req.params.transactionId);\n\n    if (!transaction) {\n      return res.status(404).json({ msg: 'Transaction not found' });\n    }\n\n    return res.status(200).json(transaction);\n  } catch (error) {\n    console.log(error);\n    return res.status(500).json({ msg: 'Internal Server Error' });\n  }\n};\n\nexport const getTransactions = async (req, res) => {\n  try {\n    const user = await User.findById(req.user.id);\n\n    const transactions = user.transactions;\n\n    if (!transactions) {\n      return res.status(404).json({ msg: 'Transaction not found' });\n    }\n\n    return res.status(200).json(transactions);\n  } catch (error) {\n    console.log(error);\n    return res.json({ msg: 'Internal server error' });\n  }\n};\n\nexport const validationRules = (method) => {\n  switch (method) {\n    case 'addTransaction':\n      return [\n        body('transactionType')\n          .exists()\n          .not()\n          .isEmpty()\n          .isIn(['income', 'expense']),\n        body('amount').exists().not().isEmpty(),\n        body('category').exists().not().isEmpty(),\n      ];\n    case 'editTransaction':\n      return [body('transactionType').optional().isIn(['income', 'expense'])];\n  }\n};\n"]}