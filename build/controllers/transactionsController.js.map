{"version":3,"sources":["../../src/controllers/transactionsController.js"],"names":["addTransaction","req","res","body","amount","date","transactionType","User","findById","user","id","newTransaction","category","categories","map","item","_id","toString","i","console","log","transactions","push","save","status","json","length","msg","editTransaction","params","transactionId","transaction","send","error","set","deleteTransaction","remove","getTransaction","getTransactions","validationRules","method","exists","not","isEmpty","isIn","optional"],"mappings":"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","file":"transactionsController.js","sourcesContent":["import User from '../models/userModel';\nimport { body, validationResult, param } from 'express-validator';\n\nexport const addTransaction = async (req, res) => {\n  //console.log(\"reqbody\", req.body)\n  try {\n    const { amount, date, transactionType } = req.body;\n    const user = await User.findById(req.user.id);\n    //console.log(\"cate\", user.categories)\n    // let getCategory = {}\n\n    //console.log(\"re parse\", req.body.category)\n\n    const newTransaction = {}\n    const category = {}\n    user.categories.map(item => {\n      if (item._id.toString() === req.body.category.toString()) {\n        for (const i in item) {\n          // if (i === 'color' || i === 'name')\n          category[i] = item[i]\n        }\n      }\n    })\n\n    newTransaction.category = category\n    if (amount) newTransaction.amount = amount\n    if (date) newTransaction.date = date\n    if (transactionType) newTransaction.transactionType = transactionType\n    console.log(newTransaction)\n\n    await user.transactions.push(newTransaction);\n    await user.save();\n\n    return res\n      .status(201)\n      .json(user.transactions[user.transactions.length - 1]);\n  } catch (error) {\n    console.log(error);\n    return res.status(400).json({ msg: 'Error creating new Transaction' });\n  }\n};\n\nexport const editTransaction = async (req, res) => {\n  try {\n    const user = await User.findById(req.user.id);\n\n    const transaction = await user.transactions.id(req.params.transactionId);\n\n    if (!transaction) {\n      return res.status(404).send({ error: 'Transaction not found!' });\n    }\n\n    await transaction.set(req.body);\n    await user.save();\n\n    return res.status(200).json(transaction);\n  } catch (error) {\n    console.log(error);\n    return res.status(500).send({ msg: 'Internal Server Error' });\n  }\n};\n\nexport const deleteTransaction = async (req, res) => {\n  try {\n    const user = await User.findById(req.user.id);\n\n    const transaction = user.transactions.id(req.params.transactionId);\n\n    if (!transaction) {\n      return res.status(404).send({ error: 'Transaction not found!' });\n    }\n\n    await transaction.remove();\n    await user.save();\n\n    return res.status(200).json(transaction);\n  } catch (error) {\n    console.log(error);\n    return res.status(500).send({ msg: 'Internal Server Error' });\n  }\n};\n\nexport const getTransaction = async (req, res) => {\n  try {\n    const user = await User.findById(req.user.id);\n\n    const transaction = await user.transactions.id(req.params.transactionId);\n\n    if (!transaction) {\n      return res.status(404).json({ msg: 'Transaction not found' });\n    }\n\n    return res.status(200).json(transaction);\n  } catch (error) {\n    console.log(error);\n    return res.status(500).json({ msg: 'Internal Server Error' });\n  }\n};\n\nexport const getTransactions = async (req, res) => {\n  try {\n    const user = await User.findById(req.user.id);\n\n    const transactions = user.transactions;\n\n    if (!transactions) {\n      return res.status(404).json({ msg: 'Transaction not found' });\n    }\n\n    return res.status(200).json(transactions);\n  } catch (error) {\n    console.log(error);\n    return res.json({ msg: 'Internal server error' });\n  }\n};\n\nexport const validationRules = (method) => {\n  switch (method) {\n    case 'addTransaction':\n      return [\n        body('transactionType')\n          .exists()\n          .not()\n          .isEmpty()\n          .isIn(['income', 'expense']),\n        body('amount').exists().not().isEmpty(),\n        body('category').exists().not().isEmpty(),\n      ];\n    case 'editTransaction':\n      return [body('transactionType').optional().isIn(['income', 'expense'])];\n  }\n};\n"]}